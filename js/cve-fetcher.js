document.addEventListener('DOMContentLoaded', () => {
    const cveContainer = document.getElementById('cve-container');
    const lang = document.documentElement.lang || 'pt'; // Default to Portuguese

    if (!cveContainer) {
        console.error('CVE container not found.');
        return;
    }

    const fetchCVEs = async () => {
        try {
            const now = new Date();
            const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

            const formatDate = (date) => date.toISOString().slice(0, 19) + "Z";

            const startDate = formatDate(sevenDaysAgo);
            const endDate = formatDate(now);

            // API endpoint documentation: https://nvd.nist.gov/developers/vulnerabilities
            const apiUrl = `https://services.nvd.nist.gov/rest/json/cves/2.0?pubStartDate=${startDate}&pubEndDate=${endDate}`;

            const response = await fetch(apiUrl);

            if (!response.ok) {
                throw new Error(`API request failed with status ${response.status}`);
            }

            const data = await response.json();
            displayCVEs(data.vulnerabilities);

        } catch (error) {
            console.error('Error fetching CVEs:', error);
            cveContainer.innerHTML = `<p class="text-red-400" data-i18n-key="cves_error">Falha ao carregar as vulnerabilidades. Tente novamente mais tarde.</p>`;
            // Ensure translator re-scans for this new key
            if (window.translator) {
                window.translator.loadTranslations(window.translator.currentLanguage);
            }
        }
    };

    const displayCVEs = (vulnerabilities) => {
        if (!vulnerabilities || vulnerabilities.length === 0) {
            cveContainer.innerHTML = `<p data-i18n-key="cves_none">Nenhuma vulnerabilidade recente encontrada nos Ãºltimos 7 dias.</p>`;
             if (window.translator) {
                window.translator.loadTranslations(window.translator.currentLanguage);
            }
            return;
        }

        // Reverse to show newest first and take top 5
        const recentCVEs = vulnerabilities.reverse().slice(0, 5);

        let html = '';
        recentCVEs.forEach(({ cve }) => {
            const cveId = cve.id;
            const descriptionObj = cve.descriptions.find(d => d.lang.startsWith(lang)) || cve.descriptions.find(d => d.lang === 'en');
            const description = descriptionObj ? descriptionObj.value : 'No description available.';

            let severity = 'N/A';
            let severityClass = 'bg-gray-600';

            if (cve.metrics && cve.metrics.cvssMetricV31) {
                const cvss = cve.metrics.cvssMetricV31[0];
                severity = `${cvss.cvssData.baseScore} ${cvss.cvssData.baseSeverity}`;
                switch (cvss.cvssData.baseSeverity) {
                    case 'CRITICAL':
                        severityClass = 'bg-red-800';
                        break;
                    case 'HIGH':
                        severityClass = 'bg-red-600';
                        break;
                    case 'MEDIUM':
                        severityClass = 'bg-yellow-600';
                        break;
                    case 'LOW':
                        severityClass = 'bg-green-600';
                        break;
                }
            }

            html += `
                <div class="bg-darkgray p-6 rounded-lg border-l-4 border-accent transform transition-all hover:-translate-y-1">
                    <div class="flex justify-between items-start mb-2">
                        <h4 class="text-lg font-bold text-accent hover:underline">
                            <a href="https://nvd.nist.gov/vuln/detail/${cveId}" target="_blank">${cveId}</a>
                        </h4>
                        <span class="text-sm ${severityClass} text-white px-3 py-1 rounded-full">${severity}</span>
                    </div>
                    <p class="text-sm opacity-80">${description}</p>
                </div>
            `;
        });

        cveContainer.innerHTML = html;
    };

    fetchCVEs();
});
